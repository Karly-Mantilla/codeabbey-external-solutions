Option Explicit

Sub test()
    Dim length As Long
    length = Cells(1, 1)
    Dim rawData As Variant
    Dim myArray() As Long
    ReDim myArray(0 To length - 1)
    Dim i As Long
    Dim num As Long
    rawData = Split(Cells(2, 1), " ")
    For i = 0 To length - 1
        myArray(i) = Int(rawData(i))
    Next
    Dim result As Double
    Const SEED As Long = 113
    Const LIMIT As Long = 10000007
    For i = 0 To length - 1
       result = result + myArray(i)
       result = result * SEED
       If result < LIMIT Then GoTo NextIteration
       result = XMod(result, LIMIT)
       
NextIteration:
    Next
    Cells(3, 1) = result
End Sub
 Function XMod(ByVal Number As Double, ByVal Divisor As Double) As Double
    ' SOURCE http://www.cpearson.com/excel/ModFunction.aspx
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' XMod
    ' Performs the same function as Mod but will not overflow
    ' with very large numbers. Both Mod and integer division ( \ )
    ' will overflow with very large numbers. XMod will not.
    ' Existing code like:
    '       Result = Number Mod Divisor
    ' should be changed to:
    '       Result = XMod(Number, Divisor)
    ' Input values that are not integers are truncated to integers. Negative
    ' numbers are converted to postive numbers.
    ' This can be used in VBA code and can be called directly from
    ' a worksheet cell.
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        Number = Int(Abs(Number))
        Divisor = Int(Abs(Divisor))
        XMod = Number - (Int(Number / Divisor) * Divisor)
    End Function