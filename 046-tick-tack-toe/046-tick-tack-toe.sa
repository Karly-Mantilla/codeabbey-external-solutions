



import Control.Monad
import Data.List


main :: IO ()
main = do
  l0 <- getLine
  ls <- replicateM (read l0) getLine
  putStrLn $ unwords $ t3S <$> ls


t3S :: String -> String
t3S s = show $ t3 $ read <$> words s 


t3 :: [Int] -> Int
t3 ns = if null rs then 0 else minimum rs where
  rs = do
  moves <- let (p, q) = playersMoves ns in [p, q]
  win <- wins
  case filter (\ (_, m) -> elem m win) moves of
    _ : _ : (fin, _) : _ -> return fin
    _ -> []


playersMoves :: [Int] -> ([(Int, Int)], [(Int, Int)])
playersMoves ns = partition (\ (x, _) -> rem x 2 /= 0) $ zip [1 ..] ns


wins :: [[Int]]
wins =
  [ [1, 2, 3]
  , [4, 5, 6]
  , [7, 8, 9]
  , [1, 4, 7]
  , [2, 5, 8]
  , [3, 6, 9]
  , [1, 5, 9]
  , [3, 5, 7]
  ]